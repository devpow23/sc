#!/bin/bash
OS=`uname -m`;
host=`hostname`;
ip=`cat /etc/VpsPackdir/ip`;
distribution=`( lsb_release -ds || cat /etc/*release || uname -om ) 2>/dev/null | head -n1`;
os_version=$(awk '/DISTRIB_RELEASE=/' /etc/*-release | sed 's/DISTRIB_RELEASE=//' | sed 's/[.]0/./');
memorialibre=`awk '/^Mem/ {printf($4);}' <(free -m)`;
memoriauso=`awk '/^Mem/ {printf($3);}' <(free -m)`;
memoriatotal=`awk '/^Mem/ {printf($2);}' <(free -m)`;
memoriacache=`awk '/^Mem/ {printf($6);}' <(free -m)`;
memoriacore=`printf '%-1s' "$(grep -c cpu[0-9] /proc/stat)"`;
processor=$(cat /proc/cpuinfo | grep "model name" | uniq | awk -F ":" '{print $2}');
xiptables=`if iptables -L |grep torrent 1> /dev/null 2> /dev/null; then 
echo -e "ON" 
else 
echo -e "OFF" 
fi`;
xssh=`if netstat -tunlp |grep ssh 1> /dev/null 2> /dev/null; then 
echo -e "ON" 
else 
echo -e "OFF" 
fi`;
xsquid=`if netstat -tunlp |grep squid 1> /dev/null 2> /dev/null; then 
echo -e "ON" 
else 
echo -e "OFF" 
fi`;
xiodine=`if netstat -tunlp |grep iodined 1> /dev/null 2> /dev/null; then 
echo -e "ON" 
else 
echo -e "OFF" 
fi`;
xstunnel=`if netstat -tunlp |grep stunnel 1> /dev/null 2> /dev/null; then 
echo -e "ON" 
else 
echo -e "OFF" 
fi`;
xbadvpn=`if netstat -tunlp |grep badvpn 1> /dev/null 2> /dev/null; then 
echo -e "ON" 
else 
echo -e "OFF" 
fi`;
xdropbear=`if netstat -tunlp |grep dropbear 1> /dev/null 2> /dev/null; then 
echo -e "ON" 
else 
echo -e "OFF" 
fi`;
xssh=`if netstat -tunlp |grep ssh 1> /dev/null 2> /dev/null; then 
echo -e "ON" 
else 
echo -e "OFF" 
fi`;
xshadowsocks=`if netstat -tunlp |grep ss-server 1> /dev/null 2> /dev/null; then 
echo -e "ON" 
else 
echo -e "OFF" 
fi`;
xwebmin=`if netstat -tunlp |grep webmin 1> /dev/null 2> /dev/null; then 
echo -e "ON" 
else 
echo -e "OFF" 
fi`;
xpython=`if netstat -tunlp |grep python 1> /dev/null 2> /dev/null; then 
echo -e "ON" 
else 
echo -e "OFF" 
fi`;
xopenvpn=`if netstat -tunlp |grep openvpn 1> /dev/null 2> /dev/null; then 
echo -e "ON" 
else 
echo -e "OFF" 
fi`;
xsocks5=`if netstat -tunlp |grep danted 1> /dev/null 2> /dev/null; then 
echo -e "ON" 
else 
echo -e "OFF" 
fi`;
xsockd=`if netstat -tunlp |grep sockd 1> /dev/null 2> /dev/null; then 
echo -e "ON" 
else 
echo -e "OFF" 
fi`;
xmicro=`if netstat -tunlp |grep microsocks 1> /dev/null 2> /dev/null; then 
echo -e "ON" 
else 
echo -e "OFF" 
fi`;
xnginx=`if netstat -tunlp |grep nginx 1> /dev/null 2> /dev/null; then 
echo -e "ON" 
else 
echo -e "OFF" 
fi`;
xdns=`if netstat -tunlp |grep dotnet 1> /dev/null 2> /dev/null; then 
echo -e "ON" 
else 
echo -e "OFF" 
fi`;
xv2ray=`if netstat -tunlp |grep v2ray 1> /dev/null 2> /dev/null; then 
echo -e "ON" 
else 
echo -e "OFF" 
fi`;
xmulti=`if netstat -tunlp |grep sslh 1> /dev/null 2> /dev/null; then 
echo -e "ON" 
else 
echo -e "OFF" 
fi`;
xcloak=`if netstat -tunlp |grep ck-server 1> /dev/null 2> /dev/null; then 
echo -e "ON" 
else 
echo -e "OFF" 
fi`;
xbrook=`if netstat -tunlp |grep brook 1> /dev/null 2> /dev/null; then 
echo -e "ON" 
else 
echo -e "OFF" 
fi`;
xiptables=`if iptables -L |grep torrent 1> /dev/null 2> /dev/null; then 
echo -e "ON" 
else 
echo -e "OFF" 
fi`;
function udphttpcustom(){
clear
if [[ $1 == "" ]]
then
figlet -p -f slant < /root/name
echo -e "\033[1;37m      【     PROMINEX     】\033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;37m › Linux Dist:	$distribution › Version: $os_version\033[0m"
echo -e "\033[1;37m › IP VPS:       $ip \033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;37m       Script @ UDP HTTP CUSTOM \033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m Agradecimientos por MODS y Configs \033[1;33m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m → Epro Dev Team\033[1;33m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;37mSeleccione una opcion:    Para Salir Ctrl + C\033[1;33m
[\033[1;32m1\033[1;33m] INSTALAR UDP HTTP CUSTOM \033[1;33m
[\033[1;32m2\033[1;33m] DESINTALAR UDP HTTP CUSTOM \033[1;33m
[\033[1;32m3\033[1;33m] INICIAR UDP HTTP CUSTOM\033[1;33m
[\033[1;32m4\033[1;33m] DETENER UDP HTTP CUSTOM\033[1;33m
[\033[1;32m5\033[1;33m] REINICIAR UDP HTTP CUSTOM\033[1;33m
[\033[1;32m0\033[1;33m] < REGRESAR \033[1;33m"
read -p ": " opcao
else
opcao=$1
fi
case $opcao in
  1) 
  insudphttpcustom;;
  2)
  desinsudphttpcustom;;
  3)
  udphttpcustomstart;;
  4)
  udphttpcustomstop;;
  5)
  udphttpcustomrestart;;
  0)
  vpspack;;
    esac
}
function udphttpcustomrestart(){
echo -e "\033[1;33m Se Reiniciara el servidor UDP HTTP Custom\033[0m"
echo -e "\033[1;33m Continuar?\033[0m"
while [[ ${yesno} != @(s|S|y|Y|n|N) ]]; do
read -p "[S/N]: " yesno
tput cuu1 && tput dl1
done
if [[ ${yesno} = @(s|S|y|Y) ]]; then
echo -e "Δ Reiniciando servicio UDP para HTTP Custom"
systemctl restart udp-custom.service
echo -e "Δ Servicio Reiniciado"
fi
echo -e "\033[1;31mPRESIONE ENTER PARA CONTINUAR\033[0m"
read -p " "
vpspack 10
}
function udphttpcustomstop(){
echo -e "\033[1;33m Se Detendra el servidor UDP HTTP Custom\033[0m"
echo -e "\033[1;33m Continuar?\033[0m"
while [[ ${yesno} != @(s|S|y|Y|n|N) ]]; do
read -p "[S/N]: " yesno
tput cuu1 && tput dl1
done
if [[ ${yesno} = @(s|S|y|Y) ]]; then
echo -e "Δ Deteniendo servicio UDP para HTTP Custom"
systemctl stop udp-custom.service
echo -e "Δ Servicio Detenido"
fi
echo -e "\033[1;31mPRESIONE ENTER PARA CONTINUAR\033[0m"
read -p " "
vpspack 10
}
function udphttpcustomstart(){
echo -e "\033[1;33m Se iniciara el servidor UDP HTTP Custom\033[0m"
echo -e "\033[1;33m Continuar?\033[0m"
while [[ ${yesno} != @(s|S|y|Y|n|N) ]]; do
read -p "[S/N]: " yesno
tput cuu1 && tput dl1
done
if [[ ${yesno} = @(s|S|y|Y) ]]; then
echo -e "Δ Iniciando servicio UDP para HTTP Custom"
systemctl start udp-custom.service
echo -e "Δ Servicio Iniciado"
fi
echo -e "\033[1;31mPRESIONE ENTER PARA CONTINUAR\033[0m"
read -p " "
vpspack 10
}
function desinsudphttpcustom(){
echo -e "\033[1;33m Se desinstalará el servidor UDP HTTP Custom\033[0m"
echo -e "\033[1;33m Continuar?\033[0m"
while [[ ${yesno} != @(s|S|y|Y|n|N) ]]; do
read -p "[S/N]: " yesno
tput cuu1 && tput dl1
done
if [[ ${yesno} = @(s|S|y|Y) ]]; then
echo -e "Δ Desintalando servicio UDP para HTTP Custom"
killall udp-custom
rm -rf /root/udp
systemctl stop udp-custom.service
systemctl disable udp-custom.service
rm /etc/systemd/system/udp-custom.service
systemctl daemon-reload
echo -e "Δ Servicio UDP para HTTP Custom Desinstalado"
fi
echo -e "\033[1;31mPRESIONE ENTER PARA CONTINUAR\033[0m"
read -p " "
vpspack 10
}

function insudphttpcustom(){
echo -e "\033[1;33m Se instalará el servidor UDP para usalo en HTTP Custom\033[0m"
echo -e "\033[1;33m Al finalizar la instalación se reiniciará el VPS\033[0m"
echo -e "\033[1;33m Este modulo requiere Ubuntu 20.x en Adelante\033[0m"
echo -e "\033[1;33m Continuar?\033[0m"
while [[ ${yesno} != @(s|S|y|Y|n|N) ]]; do
read -p "[S/N]: " yesno
tput cuu1 && tput dl1
done
if [[ ${yesno} = @(s|S|y|Y) ]]; then
echo -e "Δ Instalando"
wget --load-cookies /tmp/cookies.txt "https://docs.google.com/uc?export=download&confirm=$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate 'https://docs.google.com/uc?export=download&id=1S3IE25v_fyUfCLslnujFBSBMNunDHDk2' -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\1\n/p')&id=1S3IE25v_fyUfCLslnujFBSBMNunDHDk2" -O install-udp && rm -rf /tmp/cookies.txt && chmod +x install-udp && ./install-udp
fi
}
function slowdnsins(){
echo -e "\033[1;33m Se instalará el servidor SLOWDNS\033[0m"
echo -e "\033[1;33m Si ya tenías una instalacion Previa, esta se eliminara\033[0m"
echo -e "\033[1;33m Continuar?\033[0m"
while [[ ${yesno} != @(s|S|y|Y|n|N) ]]; do
read -p "[S/N]: " yesno
tput cuu1 && tput dl1
done
if [[ ${yesno} = @(s|S|y|Y) ]]; then
echo -e "Δ A continuación se instalar todos los paquetes, espere..."
cd /etc/VpsPackdir/
bash slowdnsins
cd
fi
echo -e "\033[1;31mPRESIONE ENTER PARA CONTINUAR\033[0m"
read -p " "
slowdns
}
function payloadssl(){
echo -e "\033[1;33m Se instalará el servidor Payload SSL\033[0m"
echo -e "\033[1;33m Si ya tenías una instalacion Previa, esta se eliminara\033[0m"
echo -e "\033[1;33m Continuar?\033[0m"
while [[ ${yesno} != @(s|S|y|Y|n|N) ]]; do
read -p "[S/N]: " yesno
tput cuu1 && tput dl1
done
if [[ ${yesno} = @(s|S|y|Y) ]]; then
echo -e "Δ Configuracion inicial"
bash /bin/payloadssl
echo -e "\033[1;31mPRESIONE ENTER PARA CONTINUAR\033[0m"
read -p " "
vpspack 10
fi
}
function sshover(){
echo -e "\033[1;33m Se instalará el servidor SSH Over CDN\033[0m"
echo -e "\033[1;33m Si ya tenías una instalacion Previa, esta se eliminara\033[0m"
echo -e "\033[1;33m Continuar?\033[0m"
while [[ ${yesno} != @(s|S|y|Y|n|N) ]]; do
read -p "[S/N]: " yesno
tput cuu1 && tput dl1
done
if [[ ${yesno} = @(s|S|y|Y) ]]; then
killall ws-epro
echo -e "Δ Configuracion inicial"
read -p "• Escribe el puerto SSH en uso:" ssh1
read -p "• Escribe el puerto SSH Over CDN para SSH:" sshcdn
read -p "• Escribe el puerto Dropbear en uso:" drop1
read -p "• Escribe el puerto SSH Over CDN para Dropbear:" dropcdn
rm /etc/VpsPackdir/sshcdnconfig.yml 1> /dev/null 2> /dev/null
wget -o /dev/null -O- https://raw.githubusercontent.com/kirrathmx/dl/master/sshcdnconfig.yml > /etc/VpsPackdir/sshcdnconfig.yml
sed -i "s/sshport/$ssh1/g" /etc/VpsPackdir/sshcdnconfig.yml
sed -i "s/sshcdn/$sshcdn/g" /etc/VpsPackdir/sshcdnconfig.yml
sed -i "s/dropport/$drop1/g" /etc/VpsPackdir/sshcdnconfig.yml
sed -i "s/dropcdnport/$dropcdn/g" /etc/VpsPackdir/sshcdnconfig.yml
cd /etc/VpsPackdir
screen -dmS sshover ./ws-epro -f /etc/VpsPackdir/sshcdnconfig.yml
cd 
echo -e "\033[1;32mRuta de Configuracion: /etc/VpsPackdir/sshcdnconfig.yml"
echo -e "\033[1;31mPRESIONE ENTER PARA CONTINUAR\033[0m"
read -p " "
vpspack 10
fi
}
function psix(){
clear
if [[ $1 == "" ]]
then
figlet -p -f slant < /root/name
echo -e "\033[1;37m      【     PROMINEX     】\033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;37m › Linux Dist:	$distribution › Version: $os_version\033[0m"
echo -e "\033[1;37m › IP VPS:       $ip \033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;37m       Script @ PSIPHON \033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m Agradecimientos por MODS y Configs \033[1;33m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m → Migue (@Miguespark) | → Epro Dev Team\033[1;33m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m → Android México Team\033[1;33m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;37mSeleccione una opcion:    Para Salir Ctrl + C\033[1;33m
[\033[1;32m1\033[1;33m] PSIPHON OFICIAL \033[1;33m
[\033[1;32m2\033[1;33m] PSIPHON HTTP CUSTOM [Recomendado]\033[1;33m
[\033[1;32m3\033[1;33m] PSIPHON INICIAR\033[1;33m
[\033[1;32m4\033[1;33m] PSIPHON DETENER\033[1;33m
[\033[1;32m5\033[1;33m] PSIPHON REINICIAR\033[1;33m
[\033[1;32m0\033[1;33m] < REGRESAR \033[1;33m"
read -p ": " opcao
else
opcao=$1
fi
case $opcao in
  1) 
  psiserver;;
  2)
  psiservernew;;
  3)
  psiiniciar;;
  4)
  psidetener;;
  5)
  psireiniciar;;
  0)
  vpspack;;
    esac
}
function psireiniciar(){
echo -e "\033[1;33m Se iniciará el servidor de Psiphon Custom\033[0m"
echo -e "\033[1;33m Debes tener Instalador el Servidor\033[0m"
echo -e "\033[1;33m Continuar?\033[0m"
while [[ ${yesno} != @(s|S|y|Y|n|N) ]]; do
read -p "[S/N]: " yesno
tput cuu1 && tput dl1
done
if [[ ${yesno} = @(s|S|y|Y) ]]; then
kill $(ps aux | grep 'psiphond' | awk '{print $2}') 1> /dev/null 2> /dev/null
killall psiphond 1> /dev/null 2> /dev/null
cd /root/psi 2> /dev/null
screen -dmS psi ./psiphond run 2> /dev/null
if pgrep psiphond >/dev/null
then
    echo "Hecho"
else
    echo "Hecho"
fi
fi
echo -e "\033[1;31mPRESIONE ENTER PARA CONTINUAR\033[0m"
read -p " "
vpspack 10
}
function psidetener(){
echo -e "\033[1;33m Se iniciará el servidor de Psiphon Custom\033[0m"
echo -e "\033[1;33m Debes tener Instalador el Servidor\033[0m"
echo -e "\033[1;33m Continuar?\033[0m"
while [[ ${yesno} != @(s|S|y|Y|n|N) ]]; do
read -p "[S/N]: " yesno
tput cuu1 && tput dl1
done
if [[ ${yesno} = @(s|S|y|Y) ]]; then
kill $(ps aux | grep 'psiphond' | awk '{print $2}') 1> /dev/null 2> /dev/null
killall psiphond 1> /dev/null 2> /dev/null
if pgrep psiphond >/dev/null
then
    echo "Hecho"
else
    echo "Hecho"
fi
fi
echo -e "\033[1;31mPRESIONE ENTER PARA CONTINUAR\033[0m"
read -p " "
vpspack 10
}
function psiiniciar(){
echo -e "\033[1;33m Se iniciará el servidor de Psiphon Custom\033[0m"
echo -e "\033[1;33m Debes tener Instalador el Servidor\033[0m"
echo -e "\033[1;33m Continuar?\033[0m"
while [[ ${yesno} != @(s|S|y|Y|n|N) ]]; do
read -p "[S/N]: " yesno
tput cuu1 && tput dl1
done
if [[ ${yesno} = @(s|S|y|Y) ]]; then
kill $(ps aux | grep 'psiphond' | awk '{print $2}') 1> /dev/null 2> /dev/null
killall psiphond 1> /dev/null 2> /dev/null
cd /root/psi 2> /dev/null
screen -dmS psi ./psiphond run 2> /dev/null
if pgrep psiphond >/dev/null
then
    echo "Status: El proceso se ha iniciado"
else
    echo "Status: El servicio no se ha iniciado. Verifique su configuración o reinstale el servidor"
fi
fi
echo -e "\033[1;31mPRESIONE ENTER PARA CONTINUAR\033[0m"
read -p " "
vpspack 10
}
function psiservernew(){
echo -e "\033[1;33m Se instalará el servidor de Psiphon Custom\033[0m"
echo -e "\033[1;33m Si ya tenías una instalacion Previa, esta se eliminara\033[0m"
echo -e "\033[1;33m Tienes que tener libre los puertos que vayas a Usar\033[0m"
echo -e "\033[1;33m Recomendados: HTTP-OSSH 80 y OSSH 443\033[0m"
echo -e "\033[1;33m Continuar?\033[0m"
while [[ ${yesno} != @(s|S|y|Y|n|N) ]]; do
read -p "[S/N]: " yesno
tput cuu1 && tput dl1
done
if [[ ${yesno} = @(s|S|y|Y) ]]; then
kill $(ps aux | grep 'psiphond' | awk '{print $2}') 1> /dev/null 2> /dev/null
killall psiphond 1> /dev/null 2> /dev/null
rm -rf /root/psi 2>/dev/null
rm /root/psi.txt 2>/dev/null
rm /var/www/html/psi.txt 2>/dev/null
cd /root
mkdir psi
cd psi
wget 'https://docs.google.com/uc?export=download&id=1Cg_YsTDt_aqK_EXbnzP9tRFSyFe_7N-m' -O 'psiphond' 2> /dev/null
cd /root/psi
chmod 775 psiphond
echo -e "\033[1;33m Escribe el puerto para FRONTED-MEEK-HTTP-OSSH:\033[0m"
read -p ": " httposh
echo -e "\033[1;33m Escribe el puerto para FRONTED-MEEK-OSSH:\033[0m"
read -p ": " osh
cd /root/psi
ipserver=`curl -s ifconfig.me`;
./psiphond --ipaddress 0.0.0.0 --protocol FRONTED-MEEK-HTTP-OSSH:$httposh --protocol FRONTED-MEEK-OSSH:$osh generate
cat /root/psi/server-entry.dat >> /root/psi.txt
screen -dmS psiserver ./psiphond run
cd /root
cp /root/psi.txt /var/www/html/psi.txt
psi=`cat /root/psi.txt`
echo -e "\033[1;33m SERVER CONFIG:\033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;32m $psi \033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;33m PROTOCOLOS:\033[0m"
echo -e "\033[1;33m → FRONTED-MEEK-OSSH:\033[1;32m $httposh \033[0m"
echo -e "\033[1;33m → OSSH:\033[1;32m $osh \033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e " "
echo -e "\033[1;33m DIRECTORIO DE ARCHIVOS:\033[1;32m /root/psi \033[0m"
echo -e "\033[1;33m RUTA PUBLICA DE CONFIG GENERADA:\033[1;32m http://$ipserver:85/psi.txt \033[0m"
fi
}
function psiserver(){
echo -e "\033[1;33m Se instalará el servidor de Psiphon\033[0m"
echo -e "\033[1;33m Si ya tenías una instalacion Previa, esta se eliminara\033[0m"
echo -e "\033[1;33m Continuar?\033[0m"
while [[ ${yesno} != @(s|S|y|Y|n|N) ]]; do
read -p "[S/N]: " yesno
tput cuu1 && tput dl1
done
if [[ ${yesno} = @(s|S|y|Y) ]]; then
rm -rf /root/psi && rm /root/psi.txt && rm /var/www/html/psi.txt
kill $(ps aux | grep 'psiphond' | awk '{print $2}') 1> /dev/null 2> /dev/null
killall psiphond 1> /dev/null 2> /dev/null
cd /root
mkdir psi
cd psi
psi=`cat /root/psi.txt`;
ship=$(wget -qO- ipv4.icanhazip.com)
curl -o /root/psi/psiphond https://raw.githubusercontent.com/Psiphon-Labs/psiphon-tunnel-core-binaries/master/psiphond/psiphond 1> /dev/null 2> /dev/null
chmod 777 psiphond
echo -e "\033[1;33m Escribe el puerto para Psiphon SSH:\033[0m"
read -p ": " sh
echo -e "\033[1;33m Escribe el puerto para Psiphon OSSH:\033[0m"
read -p ": " osh
echo -e "\033[1;33m Escribe el puerto para Psiphon FRONTED-MEEK:\033[0m"
read -p ": " fm
echo -e "\033[1;33m Escribe el puerto para Psiphon UNFRONTED-MEEK:\033[0m"
read -p ": " umo
./psiphond --ipaddress $ship --protocol SSH:$sh --protocol OSSH:$osh --protocol FRONTED-MEEK-OSSH:$fm --protocol UNFRONTED-MEEK-OSSH:$umo generate
chmod 666 psiphond.config
chmod 666 psiphond-traffic-rules.config
chmod 666 psiphond-osl.config
chmod 666 psiphond-tactics.config
chmod 666 server-entry.dat
cat server-entry.dat >> /root/psi.txt
screen -dmS psiserver ./psiphond run
cd /root
echo -e "\033[1;33m LA CONFIGURACION DE TU SERVIDOR ES:\033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;32m $psi \033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;33m PROTOCOLOS HABILITADOS:\033[0m"
echo -e "\033[1;33m → SSH:\033[1;32m $sh \033[0m"
echo -e "\033[1;33m → OSSH:\033[1;32m $osh \033[0m"
echo -e "\033[1;33m → FRONTED-MEEK-OSSH:\033[1;32m $fm \033[0m"
echo -e "\033[1;33m → UNFRONTED-MEEK-OSSH:\033[1;32m $umo \033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e " "
echo -e "\033[1;33m DIRECTORIO DE ARCHIVOS:\033[1;32m /root/psi \033[0m"
fi
}
function cloakins(){
curl -o Shadowsocks-Cloak-Installer.sh -L https://git.io/fjECg && bash Shadowsocks-Cloak-Installer.sh && rm Shadowsocks-Cloak-Installer.sh
}
function v2rayinspwr(){
echo -e "Se instalará la version Modificiada de V2ray"
echo -e "Este Mod no puede funcionar correctamente en conjunto con el original"
echo -e "Continuar?"
while [[ ${yesno} != @(s|S|y|Y|n|N) ]]; do
read -p "[S/N]: " yesno
tput cuu1 && tput dl1
done
if [[ ${yesno} = @(s|S|y|Y) ]]; then
bash <(curl https://raw.githubusercontent.com/powermx/v2/main/v2power.sh)
fi
}
function v2raymanager(){
v2rayadmin
}
function v2rayins(){
echo -e "Se instalará la version Multiusuario de V2ray"
echo -e "Continuar?"
while [[ ${yesno} != @(s|S|y|Y|n|N) ]]; do
read -p "[S/N]: " yesno
tput cuu1 && tput dl1
done
if [[ ${yesno} = @(s|S|y|Y) ]]; then
source <(curl -sL https://multi.netlify.com/v2ray.sh)
fi
}
function dnsserver(){
echo -e "Instalando DNS Server WEB"
curl -sSL https://download.technitium.com/dns/install-ubuntu.sh | bash 1> /dev/null 2> /dev/null
echo -e "Actualizando DNS del Servidor"
echo -e "DNS Server Instalado"
echo -e "Consola Web DNS Server: http://'$ip':5380/"
echo -e "No olvide establecer su password admin del Panel"
}
function socks5(){
echo -e "Instalando Socks5 espere..."
bash /etc/VpsPackdir/danted.sh
echo -e "Escribe un puerto para Socks5"
read -p ": " sockcinco
if lsof -Pi :$sockcinco -sTCP:LISTEN -t >/dev/null ; then
    echo "Ya esta en uso ese puerto"
else
sed -i '2i internal: 0.0.0.0 port = '"$sockcinco"'' /etc/danted.conf
sed -i '3i external: '"$ip"'' /etc/danted.conf
sleep 5
echo "Finalizando Instalacion"
/etc/init.d/danted start
sleep 5
fi
echo -e "\033[1;31mPRESIONE ENTER PARA CONTINUAR\033[0m"
read -p " "
vpspack 10
}
function estadisticas(){
clear
if [[ $1 == "" ]]
then
figlet -p -f slant < /root/name
echo -e "\033[1;37m      【     PROMINEX     】\033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;37m › Linux Dist:	$distribution › Version: $os_version\033[0m"
echo -e "\033[1;37m › IP VPS:       $ip \033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;37m       Script @ ESTADISTICAS \033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m Estos paquetes consumen grandes cantidades de datos\033[1;33m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m Se recomienda instalar en VPS con servicio Unmetered\033[1;33m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;37mSeleccione una opcion:    Para Salir Ctrl + C\033[1;33m
[\033[1;32m1\033[1;33m] DARKSTAT \033[1;33m
[\033[1;32m2\033[1;33m] NETDATA \033[1;33m
[\033[1;32m3\033[1;33m] GLANCES \033[1;33m
[\033[1;32m4\033[1;33m] VNSTAT \033[1;33m
[\033[1;32m5\033[1;33m] NTOPNG \033[1;33m
[\033[1;32m0\033[1;33m] < REGRESAR \033[1;33m"
read -p ": " opcao
else
opcao=$1
fi
case $opcao in
  1) 
  darkstat;;
  2)
  netdata;;
  3)
  glances;;
  4)
  vnstat;;
  5)
  ntopngins;;
  0)
  vpspack;;
    esac
}
function darkstat(){
clear
echo "Instalando DarkStat"
apt-get install -y darkstat 1> /dev/null 2> /dev/null
echo "Iniciando DarkStat en puerto 666"
darkstat -i eth0 -p 666
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
vpspack 10
}
function netdata(){
clear
echo "Instalando NetData"
bash <(curl -Ss https://my-netdata.io/kickstart.sh)
echo "Estadisticas de Netdata instaladas en puerto: 19999"
echo "http://your_server_ip:19999"
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
vpspack 10
}
function glances(){
clear
echo "Instalando Glances"
apt-get install -y glances 1> /dev/null 2> /dev/null
echo "Para iniciar las estadisticas con Glances escriba : glances"
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
vpspack 10
}
function vnstat(){
clear
echo "Instalando Vnstat"
apt-get install -y vnstat 1> /dev/null 2> /dev/null
echo "Para iniciar las estadisticas escriba : vnstat"
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
vpspack 10
}
function ntopngins(){
echo -e "A continuacion se instalar el paquete NTOPNG"
echo -e "Al finalizar dicha instalacion, el servicio"
echo -e "Quedara instalado en el puerto 3000"
echo -e "Podra accesar a NTOPNG desde la web usando:"
echo -e "http://ip:3000"
echo -e ""
echo -e "Por default el usuario y passwd son : admin"
echo -e "\033[1;31mPRESIONE ENTER PARA COMENZAR INSTALACION\033[0m"
read -p " "
apt-get install ntopng -y 1> /dev/null 2> /dev/null
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
vpspack 10
}
function libs32(){
dpkg --add-architecture i386
apt-get update
apt-get install libc6:i386 libstdc++6:i386
clear
echo -e "\033[1;31mLIBRERIAS INSTALADAS, PRESIONE ENTER\033[0m"
read -p " "
vpspack 10
}
function nginx(){
echo "Desinstalando nginx"
apt-get remove nginx
echo "Instalando nginx"
apt-get -y install nginx
rm /etc/nginx/sites-enabled/default
rm /etc/nginx/sites-available/default
wget --no-check-certificate -O /etc/nginx/nginx.conf "https://raw.githubusercontent.com/powermx/autoscript/master/nginx.conf"
mkdir -p /home/vps/public_html
echo "<pre>1 + 1 = 2</pre>" > /home/vps/public_html/index.html
wget --no-check-certificate -O /etc/nginx/conf.d/vps.conf "https://raw.githubusercontent.com/powermx/autoscript/master/vps.conf"
service nginx restart
echo "Instalacion Finalizada"
echo "Verfique la instalacion accesando a $ip:81"
echo "La carpeta de archivos se encuentra en la siguiente ruta:"
echo "/home/vps/public_html"
echo -e "\033[1;31mPRESIONE ENTER PARA CONTINUAR\033[0m"
read -p " "
vpspack 10
}
function installdropbear(){
clear
if [[ $1 == "" ]]
then
figlet -p -f slant < /root/name
echo -e "\033[1;37m      【     PROMINEX     】\033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;37m › Linux Dist:	$distribution › Version: $os_version\033[0m"
echo -e "\033[1;37m › IP VPS:       $ip \033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;37m - INSTALADOR DROPBEAR - \033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;37mSeleccione su Sistema:    Para Salir Ctrl + C\033[1;33m
[\033[1;32m1\033[1;33m] Ubuntu \033[1;33m
[\033[1;32m2\033[1;33m] Debian \033[1;33m
[\033[1;32m3\033[1;33m] CentOS \033[1;33m
[\033[1;32m0\033[1;33m] < REGRESAR                 \033[1;33m"
read -p ": " opcao
else
opcao=$1
fi
case $opcao in
  1)
   dropbearuniversal;;
  2)
   dropbearuniversal;;
  3)
   dropbearcentos;;
   0)
   vpspack;;
 esac
}
function dropbearuniversal(){
echo "› Preparando Instalacion"
service dropbear stop 1> /dev/null 2> /dev/null
killall dropbear 1> /dev/null 2> /dev/null
apt-get -y purge dropbear 1> /dev/null 2> /dev/null
apt-get -y remove dropbear 1> /dev/null 2> /dev/null
echo "› Instalando Dropbear"
apt-get -y install dropbear 1> /dev/null 2> /dev/null
rm /etc/default/dropbear
cat <<EOF > /etc/default/dropbear
NO_START=0
DROPBEAR_EXTRA_ARGS="XXX"
DROPBEAR_BANNER="/etc/banner"
DROPBEAR_RECEIVE_WINDOW=65536
EOF
echo "Escribe el o los puertos a Agregar:"
read -p " " portdrop
totales=($portdrop)
    for((i=0; i<${#totales[@]}; i++)); do
        puertook="$puertook ${totales[$i]}"
   done
  [[  -z $puertook ]] && {
  return 1
  }
for dpts in $(echo $puertook); do
sed -i "s/XXX/-p $dpts XXX/g" /etc/default/dropbear
done
sed -i "s/XXX//g" /etc/default/dropbear
echo "/bin/false" >> /etc/shells
service ssh restart
service dropbear restart
echo -e "\033[1;33m › INSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
vpspack 10
}
function dropbear14(){
echo "› Preparando Instalacion"
service dropbear stop 1> /dev/null 2> /dev/null
killall dropbear 1> /dev/null 2> /dev/null
apt-get -y purge dropbear 1> /dev/null 2> /dev/null
apt-get -y remove dropbear 1> /dev/null 2> /dev/null
echo "› Instalando Dropbear"
apt-get -y install dropbear 1> /dev/null 2> /dev/null
rm /etc/default/dropbear
cat <<EOF > /etc/default/dropbear
NO_START=0
DROPBEAR_EXTRA_ARGS="XXX"
DROPBEAR_BANNER="/etc/banner"
DROPBEAR_RECEIVE_WINDOW=65536
EOF
echo "Escribe el o los puertos a Agregar:"
read -p "→ " portdrop
totales=($portdrop)
    for((i=0; i<${#totales[@]}; i++)); do
        puertook="$puertook ${totales[$i]}"
   done
  [[  -z $puertook ]] && {
  return 1
  }
for dpts in $(echo $puertook); do
sed -i "s/XXX/-p $dpts XXX/g" /etc/default/dropbear
done
sed -i "s/XXX//g" /etc/default/dropbear
echo "/bin/false" >> /etc/shells
service ssh restart
service dropbear restart
echo -e "\033[1;33m › INSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
vpspack 10
}
function dropbear16(){
echo "› Preparando Instalacion"
service dropbear stop 1> /dev/null 2> /dev/null
killall dropbear 1> /dev/null 2> /dev/null
apt-get -y purge dropbear 
apt-get -y remove dropbear 
echo "› Instalando Dropbear"
apt-get -y install dropbear=2016.72-1
rm /etc/default/dropbear
cat <<EOF > /etc/default/dropbear
NO_START=0
DROPBEAR_EXTRA_ARGS="XXX"
DROPBEAR_BANNER="/etc/banner"
DROPBEAR_RECEIVE_WINDOW=65536
EOF
echo "Escribe el o los puertos a Agregar:"
read -p "→ " portdrop
totales=($portdrop)
    for((i=0; i<${#totales[@]}; i++)); do
        puertook="$puertook ${totales[$i]}"
   done
  [[  -z $puertook ]] && {
  return 1
  }
for dpts in $(echo $puertook); do
sed -i "s/XXX/-p $dpts XXX/g" /etc/default/dropbear
done
sed -i "s/XXX//g" /etc/default/dropbear
echo "/bin/false" >> /etc/shells
service ssh restart
service dropbear restart
echo -e "\033[1;33m › INSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
vpspack 10
}
function dropbeardebian9(){
clear
echo "Instalando Dropbear"
apt-get -y purge dropbear
apt-get -y install dropbear=2016.74-5 
clear
sed -i 's/NO_START=1/NO_START=0/g' /etc/default/dropbear
sed -i 's/DROPBEAR_PORT=22/DROPBEAR_PORT=443/g' /etc/default/dropbear
echo "/bin/false" >> /etc/shells
service ssh restart
service dropbear restart
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
vpspack 10
}
function dropbearcentos(){
clear
echo "Instalando Dropbear"
yum -y remove dropbear
wget http://ftp-stud.hs-esslingen.de/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm 1> /dev/null 2> /dev/null
rpm -Uvh epel-release-6-8.noarch.rpm
yum -y install dropbear
mkdir /etc/sysconfig
wget --no-check-certificate https://raw.githubusercontent.com/powermx/dropbearcentos/master/dropbear > /etc/sysconfig/dropbear
service dropbear restart
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
vpspack 10
}
function shadowsocks(){
clear
cd /etc/VpsPackdir/ && chmod +x shadowsocks.sh && ./shadowsocks.sh 2>&1 | tee shadowsocks.log && cd /root
}
function python(){
clear
echo -e "Instalando Paquetes Necesarios"
apt-get -y install screen 1> /dev/null 2> /dev/null
apt-get -y install python3-pip 1> /dev/null 2> /dev/null
apt-get -y install python 1> /dev/null 2> /dev/null
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
vpspack 10
}
function stunnel(){
clear
echo "Instalando Stunnel, Espere..."
bash /etc/VpsPackdir/stunnel
}
function badvpnstop(){
killall badvpn-udpgw
echo -e "Se han detenido todos los procesos de BadVPN"
echo -e "\033[1;31mPRESIONE ENTER PARA CONTINUAR\033[0m"
read -p " "
vpspack 10
}
function badvpnalternativo(){
echo "Instalando BADVPN Alterno"
wget --no-check-certificate https://raw.githubusercontent.com/powermx/badudp/master/install && bash install
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
vpspack 10
}
badvpnport(){
wget --no-check-certificate https://raw.githubusercontent.com/powermx/badvpn/master/easyinstall 1> /dev/null 2> /dev/null && bash easyinstall && badvpn start
echo -e "Que nuevo puerto deseas agregar en BadVPN"
read -p ">:" badop
badvpn-udpgw --listen-addr 127.0.0.1:$badop --max-clients 1000 --max-connections-for-client 999 > /dev/null &
echo -e "Se ha iniciado un nuevo puerto BadVPN : $badop"
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
vpspack 10
}
function badvpn_install(){
curl -o /root/easyinstall https://raw.githubusercontent.com/powermx/badvpn/master/easyinstall 1> /dev/null 2> /dev/null && bash /root/easyinstall && badvpn start
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
vpspack 10
}
function badup(){
echo -e "Instalando BadVPN - UDP"
echo -e "Limpiando ..."
killall badvpn-udpgw
cd /etc/VpsPackdir/
echo -e "Instalando Paquetes, Espere..."
bash badudp.sh
echo -e "Iniciando BadVPN"
screen -dmS badu badudp
cd ~
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
vpspack 10
}
function badvpncron(){
echo -e "\033[1;33m Esta opcion activara la opcion de verficacion de BADVPN\033[0m"
echo -e "\033[1;33m Continuar?\033[0m"
while [[ ${yesno} != @(s|S|y|Y|n|N) ]]; do
read -p "[S/N]: " yesno
tput cuu1 && tput dl1
done
if [[ ${yesno} = @(s|S|y|Y) ]]; then
echo "*/10 * * * * root /etc/VpsPackdir/badvpncron.sh" >> /etc/crontab
service cron restart
echo -e "Cron BadVPN - UDP Activado"
echo -e "Puedes verificar su instalación tecleando : nano /etc/crontab"
echo -e "Puedes verificar su registro en : nano /root/badvpn.log"
fi
echo -e "\033[1;31mPRESIONE ENTER PARA FINALIZAR\033[0m"
read -p " "
vpspack 10
}
function badvpnmenu(){
clear
if [[ $1 == "" ]]
then
figlet -p -f slant < /root/name
echo -e "\033[1;37m      【     PROMINEX     】\033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;37m › Linux Dist:	$distribution › Version: $os_version\033[0m"
echo -e "\033[1;37m › IP VPS:       $ip \033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;37m - INSTALADOR BADVPN - \033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;37mSeleccione su Sistema:    Para Salir Ctrl + C\033[1;33m
[\033[1;32m1\033[1;33m] BADVPN NORMAL \033[1;33m
[\033[1;32m2\033[1;33m] BADVPN CUSTOM PORT \033[1;33m
[\033[1;32m3\033[1;33m] BADVPN ALTERNATIVO \033[1;33m
[\033[1;32m4\033[1;33m] BADVPN BADUDP \033[1;33m
[\033[1;32m5\033[1;33m] BADVPN CRON \033[1;33m
[\033[1;32m6\033[1;33m] DETENER BADVPN \033[1;33m
[\033[1;32m0\033[1;33m] < REGRESAR                 \033[1;33m"
read -p ": " opcao
else
opcao=$1
fi
case $opcao in
  1)
   badvpn_install;;
  2)
   badvpnport;;
   3)
   badvpnalternativo;;
   4)
   badup;;
   5)
   badvpncron;;
   6)
   badvpnstop;;
   0)
   vpspack;;
 esac
}
clear
if [[ $1 == "" ]]
then
figlet -p -f smslant < /root/name
echo -e "\033[1;37m      【     PROMINEX     】\033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;37m › Linux Dist: $distribution \033[0m"
echo -e "\033[1;37m › IP Publica VPS:\033[1;32m$ip \033[0m"
echo -e "\033[1;37m › Hostname VPS:\033[1;32m$host \033[0m"
echo -e "\033[1;37m › M: $memoriatotal MB ›Uso: $memoriauso MB ›Libre: $memorialibre MB\033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;37m     INSTALADORES EXTRAS \033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;37mSeleccione una opcion:    Para Salir Ctrl + C\033[1;33m
[\033[1;32m1\033[1;33m]  BADVPN              › [\033[1;32m2\033[1;33m]  STUNNEL4
[\033[1;32m3\033[1;33m]  PYTHON SOURCES      › [\033[1;32m4\033[1;33m]  SHADOWSOCKS
[\033[1;32m5\033[1;33m]  DROPBEAR            › [\033[1;32m6\033[1;33m]  V2RAY (Original)
[\033[1;32m7\033[1;33m]  V2RAY (Custom)      › [\033[1;32m8\033[1;33m]  PSIPHON SERVER
[\033[1;32m9\033[1;33m] SLOWDNS              › [\033[1;32m10\033[1;33m] UDP HTTP CUSTOM 
[\033[1;32m0\033[1;33m] < REGRESAR                 \033[1;33m"
echo -e "\033[1;33m      ⋤⋥ Escriba una opcion:      \033[0m"
read -p ": " opcao
else
opcao=$1
fi
case $opcao in
  1)
   badvpnmenu;;
  2)
   stunnel;;
  3)
   python;;
  4)
   shadowsocks;;
  5)
   installdropbear;;
  6)
   v2raymanager;;
  7)
   v2rayinspwr;;
  8)
   psix;;
  9)
   slowdnsins;;
  10)
   udphttpcustom;;
  0)
   vpspack;;
esac

